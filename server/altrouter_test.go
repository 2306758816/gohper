package server

import (
	"testing"

	"github.com/cosiner/golib/test"
)

func testCompile(t *testing.T) {
	tt := test.WrapTest(t)
	pat, names, err := compile("/:user/:id/:a")
	tt.Log(pat, names, err)
	tt.Log(compile("/user/*abc/"))
	// tt.AssertEq("1", "/*/*", pat)
	// tt.AssertEq("2", "user", names[0])
	// tt.AssertEq("3", "id", names[1])
	// tt.AssertEq("4", nil, err)

	// _, _, err = compile("/user/*")
	// tt.AssertEq("5", errSingleSemi, err)
	// _, _, err = compile("/user/*/")
	// tt.AssertEq("6", errContinuSemi, err)
	// _, _, err = compile("/user/*/")
	// tt.AssertEq("7", errContinuSemi, err)
	// _, _, err = compile("/user/*/")
	// tt.AssertEq("8", errSingleSemi, err)
	// _, _, err = compile("/user/*")
	// tt.AssertEq("9", errContinuSemi, err)
	// _, _, err = compile("/user/aa:ic")
	// tt.AssertEq("9", errCharBeforeSemi, err)
}

func testAddNode(t *testing.T) {
	// tt := test.WrapTest(t)
	handler := new(RouteHandler)
	node := &RouteNode{str: "/user/id", handler: handler}
	fn := func(n *RouteNode) {
		n.handler = handler
	}
	node.AddPath("/user/i", fn)
	node.AddPath("/user/ie", fn)
	node.AddPath("/user/ief", fn)
	node.AddPath("/user/ieg", fn)
	node.AddPath("/title/*", fn)
	node.AddPath("/title/id/*", fn)
	node.AddPath("/title/i/*", fn)
	node.AddPath("/title/id/123", fn)
	node.AddPath("/title/id/12", fn)
	node.AddPath("/ti/id/12", fn)
	PrintRouteTree(node)
}

func noded() *RouteNode {
	handler := new(RouteHandler)
	node := &RouteNode{str: "/user/id", handler: handler}
	fn := func(n *RouteNode) {
		n.handler = handler
	}
	node.AddPath("/user/i", fn)
	node.AddPath("/user/ie", fn)
	node.AddPath("/user/ief", fn)
	node.AddPath("/user/ieg", fn)
	node.AddPath("/title/*", fn)
	node.AddPath("/title/id/*", fn)
	node.AddPath("/title/i/*", fn)
	node.AddPath("/title/id/12", fn)
	node.AddPath("/ti/id/12", fn)
	node.AddPath("/ti/*/12", fn)

	// OAuth Authorizations
	node.AddPath("/authorizations", fn)
	node.AddPath("/authorizations/*", fn)
	node.AddPath("/authorizations", fn)
	//node.AddPath("/authorizations/clients/*", fn)
	//node.addPat("/authorizations/*", fn)
	node.AddPath("/authorizations/*", fn)
	node.AddPath("/applications/*/tokens/*", fn)
	node.AddPath("/applications/*/tokens", fn)
	node.AddPath("/applications/*/tokens/*", fn)
	// Activity
	node.AddPath("/events", fn)
	node.AddPath("/repos/*/*/events", fn)
	node.AddPath("/networks/*/*/events", fn)
	node.AddPath("/orgs/*/events", fn)
	node.AddPath("/users/*/received_events", fn)
	node.AddPath("/users/*/received_events/public", fn)
	node.AddPath("/users/*/events", fn)
	node.AddPath("/users/*/events/public", fn)
	node.AddPath("/users/*/events/orgs/*", fn)
	node.AddPath("/feeds", fn)
	node.AddPath("/notifications", fn)
	node.AddPath("/repos/*/*/notifications", fn)
	node.AddPath("/notifications", fn)
	node.AddPath("/repos/*/*/notifications", fn)
	node.AddPath("/notifications/threads/*", fn)
	//node.addPat("/notifications/threads/*", fn)
	node.AddPath("/notifications/threads/*/subscription", fn)
	node.AddPath("/notifications/threads/*/subscription", fn)
	node.AddPath("/notifications/threads/*/subscription", fn)
	node.AddPath("/repos/*/*/stargazers", fn)
	node.AddPath("/users/*/starred", fn)
	node.AddPath("/user/starred", fn)
	node.AddPath("/user/starred/*/*", fn)
	node.AddPath("/user/starred/*/*", fn)
	node.AddPath("/user/starred/*/*", fn)
	node.AddPath("/repos/*/*/subscribers", fn)
	node.AddPath("/users/*/subscriptions", fn)
	node.AddPath("/user/subscriptions", fn)
	node.AddPath("/repos/*/*/subscription", fn)
	node.AddPath("/repos/*/*/subscription", fn)
	node.AddPath("/repos/*/*/subscription", fn)
	node.AddPath("/user/subscriptions/*/*", fn)
	node.AddPath("/user/subscriptions/*/*", fn)
	node.AddPath("/user/subscriptions/*/*", fn)
	// Gists
	node.AddPath("/users/*/gists", fn)
	node.AddPath("/gists", fn)
	node.AddPath("/gists/public", fn)
	node.AddPath("/gists/starred", fn)
	node.AddPath("/gists/*", fn)
	node.AddPath("/gists", fn)
	//node.addPat("/gists/*", fn)
	node.AddPath("/gists/*/star", fn)
	node.AddPath("/gists/*/star", fn)
	node.AddPath("/gists/*/star", fn)
	node.AddPath("/gists/*/forks", fn)
	node.AddPath("/gists/*", fn)
	// Git Data
	node.AddPath("/repos/*/*/git/blobs/*", fn)
	node.AddPath("/repos/*/*/git/blobs", fn)
	node.AddPath("/repos/*/*/git/commits/*", fn)
	node.AddPath("/repos/*/*/git/commits", fn)
	node.AddPath("/repos/*/*/git/refs/*ref", fn)
	node.AddPath("/repos/*/*/git/refs", fn)
	node.AddPath("/repos/*/*/git/refs", fn)
	//node.addPat("/repos/*/*/git/refs/*ref", fn)
	//node.AddPath("/repos/*/*/git/refs/*ref", fn)
	node.AddPath("/repos/*/*/git/tags/*", fn)
	node.AddPath("/repos/*/*/git/tags", fn)
	node.AddPath("/repos/*/*/git/trees/*", fn)
	node.AddPath("/repos/*/*/git/trees", fn)
	// Issues
	node.AddPath("/issues", fn)
	node.AddPath("/user/issues", fn)
	node.AddPath("/orgs/*/issues", fn)
	node.AddPath("/repos/*/*/issues", fn)
	node.AddPath("/repos/*/*/issues/*", fn)
	node.AddPath("/repos/*/*/issues", fn)
	//node.addPat("/repos/*/*/issues/*", fn)
	node.AddPath("/repos/*/*/assignees", fn)
	node.AddPath("/repos/*/*/assignees/*", fn)
	node.AddPath("/repos/*/*/issues/*/comments", fn)
	node.AddPath("/repos/*/*/issues/comments", fn)
	node.AddPath("/repos/*/*/issues/comments/*", fn)
	node.AddPath("/repos/*/*/issues/*/comments", fn)
	//node.addPat("/repos/*/*/issues/comments/*", fn)
	//node.AddPath("/repos/*/*/issues/comments/*", fn)
	node.AddPath("/repos/*/*/issues/*/events", fn)
	node.AddPath("/repos/*/*/issues/events", fn)
	node.AddPath("/repos/*/*/issues/events/*", fn)
	node.AddPath("/repos/*/*/labels", fn)
	node.AddPath("/repos/*/*/labels/*", fn)
	node.AddPath("/repos/*/*/labels", fn)
	//node.addPat("/repos/*/*/labels/*", fn)
	node.AddPath("/repos/*/*/labels/*", fn)
	node.AddPath("/repos/*/*/issues/*/labels", fn)
	node.AddPath("/repos/*/*/issues/*/labels", fn)
	node.AddPath("/repos/*/*/issues/*/labels/*", fn)
	node.AddPath("/repos/*/*/issues/*/labels", fn)
	node.AddPath("/repos/*/*/issues/*/labels", fn)
	node.AddPath("/repos/*/*/milestones/*/labels", fn)
	node.AddPath("/repos/*/*/milestones", fn)
	node.AddPath("/repos/*/*/milestones/*", fn)
	node.AddPath("/repos/*/*/milestones", fn)
	//node.addPat("/repos/*/*/milestones/*", fn)
	node.AddPath("/repos/*/*/milestones/*", fn)
	// Miscellaneous
	node.AddPath("/emojis", fn)
	node.AddPath("/gitignore/templates", fn)
	node.AddPath("/gitignore/templates/*", fn)
	node.AddPath("/markdown", fn)
	node.AddPath("/markdown/raw", fn)
	node.AddPath("/meta", fn)
	node.AddPath("/rate_limit", fn)
	// Organizations
	node.AddPath("/users/*/orgs", fn)
	node.AddPath("/user/orgs", fn)
	node.AddPath("/orgs/*", fn)
	//node.addPat("/orgs/*", fn)
	node.AddPath("/orgs/*/members", fn)
	node.AddPath("/orgs/*/members/*", fn)
	node.AddPath("/orgs/*/members/*", fn)
	node.AddPath("/orgs/*/public_members", fn)
	node.AddPath("/orgs/*/public_members/*", fn)
	node.AddPath("/orgs/*/public_members/*", fn)
	node.AddPath("/orgs/*/public_members/*", fn)
	node.AddPath("/orgs/*/teams", fn)
	node.AddPath("/teams/*", fn)
	node.AddPath("/orgs/*/teams", fn)
	//node.addPat("/teams/*", fn)
	node.AddPath("/teams/*", fn)
	node.AddPath("/teams/*/members", fn)
	node.AddPath("/teams/*/members/*", fn)
	node.AddPath("/teams/*/members/*", fn)
	node.AddPath("/teams/*/members/*", fn)
	node.AddPath("/teams/*/repos", fn)
	node.AddPath("/teams/*/repos/*/*", fn)
	node.AddPath("/teams/*/repos/*/*", fn)
	node.AddPath("/teams/*/repos/*/*", fn)
	node.AddPath("/user/teams", fn)
	// Pull Requests
	node.AddPath("/repos/*/*/pulls", fn)
	node.AddPath("/repos/*/*/pulls/*", fn)
	node.AddPath("/repos/*/*/pulls", fn)
	//node.addPat("/repos/*/*/pulls/*", fn)
	node.AddPath("/repos/*/*/pulls/*/commits", fn)
	node.AddPath("/repos/*/*/pulls/*/files", fn)
	node.AddPath("/repos/*/*/pulls/*/merge", fn)
	node.AddPath("/repos/*/*/pulls/*/merge", fn)
	node.AddPath("/repos/*/*/pulls/*/comments", fn)
	node.AddPath("/repos/*/*/pulls/comments", fn)
	node.AddPath("/repos/*/*/pulls/comments/*", fn)
	node.AddPath("/repos/*/*/pulls/*/comments", fn)
	//node.addPat("/repos/*/*/pulls/comments/*", fn)
	//node.AddPath("/repos/*/*/pulls/comments/*", fn)
	// Repositories
	node.AddPath("/user/repos", fn)
	node.AddPath("/users/*/repos", fn)
	node.AddPath("/orgs/*/repos", fn)
	node.AddPath("/repositories", fn)
	node.AddPath("/user/repos", fn)
	node.AddPath("/orgs/*/repos", fn)
	node.AddPath("/repos/*/*", fn)
	//node.addPat("/repos/*/*", fn)
	node.AddPath("/repos/*/*/contributors", fn)
	node.AddPath("/repos/*/*/languages", fn)
	node.AddPath("/repos/*/*/teams", fn)
	node.AddPath("/repos/*/*/tags", fn)
	node.AddPath("/repos/*/*/branches", fn)
	node.AddPath("/repos/*/*/branches/*", fn)
	node.AddPath("/repos/*/*", fn)
	node.AddPath("/repos/*/*/collaborators", fn)
	node.AddPath("/repos/*/*/collaborators/*", fn)
	node.AddPath("/repos/*/*/collaborators/*", fn)
	node.AddPath("/repos/*/*/collaborators/*", fn)
	node.AddPath("/repos/*/*/comments", fn)
	node.AddPath("/repos/*/*/commits/*/comments", fn)
	node.AddPath("/repos/*/*/commits/*/comments", fn)
	node.AddPath("/repos/*/*/comments/*", fn)
	//node.addPat("/repos/*/*/comments/*", fn)
	node.AddPath("/repos/*/*/comments/*", fn)
	node.AddPath("/repos/*/*/commits", fn)
	node.AddPath("/repos/*/*/commits/*", fn)
	node.AddPath("/repos/*/*/readme", fn)
	node.AddPath("/repos/*/*/contents/*path", fn)
	//node.AddPath("/repos/*/*/contents/*path", fn)
	//node.AddPath("/repos/*/*/contents/*path", fn)
	node.AddPath("/repos/*/*/*/*", fn)
	node.AddPath("/repos/*/*/keys", fn)
	node.AddPath("/repos/*/*/keys/*", fn)
	node.AddPath("/repos/*/*/keys", fn)
	//node.addPat("/repos/*/*/keys/*", fn)
	node.AddPath("/repos/*/*/keys/*", fn)
	node.AddPath("/repos/*/*/downloads", fn)
	node.AddPath("/repos/*/*/downloads/*", fn)
	node.AddPath("/repos/*/*/downloads/*", fn)
	node.AddPath("/repos/*/*/forks", fn)
	node.AddPath("/repos/*/*/forks", fn)
	node.AddPath("/repos/*/*/hooks", fn)
	node.AddPath("/repos/*/*/hooks/*", fn)
	node.AddPath("/repos/*/*/hooks", fn)
	//node.addPat("/repos/*/*/hooks/*", fn)
	node.AddPath("/repos/*/*/hooks/*/tests", fn)
	node.AddPath("/repos/*/*/hooks/*", fn)
	node.AddPath("/repos/*/*/merges", fn)
	node.AddPath("/repos/*/*/releases", fn)
	node.AddPath("/repos/*/*/releases/*", fn)
	node.AddPath("/repos/*/*/releases", fn)
	//node.addPat("/repos/*/*/releases/*", fn)
	node.AddPath("/repos/*/*/releases/*", fn)
	node.AddPath("/repos/*/*/releases/*/assets", fn)
	node.AddPath("/repos/*/*/stats/contributors", fn)
	node.AddPath("/repos/*/*/stats/commit_activity", fn)
	node.AddPath("/repos/*/*/stats/code_frequency", fn)
	node.AddPath("/repos/*/*/stats/participation", fn)
	node.AddPath("/repos/*/*/stats/punch_card", fn)
	node.AddPath("/repos/*/*/statuses/*", fn)
	node.AddPath("/repos/*/*/statuses/*", fn)
	// Search
	node.AddPath("/search/repositories", fn)
	node.AddPath("/search/code", fn)
	node.AddPath("/search/issues", fn)
	node.AddPath("/search/users", fn)
	node.AddPath("/legacy/issues/search/*/*/*/*", fn)
	node.AddPath("/legacy/repos/search/*", fn)
	node.AddPath("/legacy/user/search/*", fn)
	node.AddPath("/legacy/user/email/*", fn)
	// Users
	node.AddPath("/users/*", fn)
	node.AddPath("/user", fn)
	//node.addPat("/user", fn)
	node.AddPath("/users", fn)
	node.AddPath("/user/emails", fn)
	node.AddPath("/user/emails", fn)
	node.AddPath("/user/emails", fn)
	node.AddPath("/users/*/followers", fn)
	node.AddPath("/user/followers", fn)
	node.AddPath("/users/*/following", fn)
	node.AddPath("/user/following", fn)
	node.AddPath("/user/following/*", fn)
	node.AddPath("/users/*/following/*", fn)
	node.AddPath("/user/following/*", fn)
	node.AddPath("/user/following/*", fn)
	node.AddPath("/users/*/keys", fn)
	node.AddPath("/user/keys", fn)
	node.AddPath("/user/keys/*", fn)
	node.AddPath("/user/keys", fn)
	node.AddPath("/user/keys/*", fn)
	node.AddPath("/user/keys/*", fn)
	PrintRouteTree(node)
	return node
}

var sn = noded()

func BenchmarkMatchNode(b *testing.B) {
	// tt := test.WrapTest(b)
	// path := []string{
	// path := []string{
	// path := "/legacy/issues/search/aaa/bbb/ccc/ddd"
	path := "/user/repos"
	// "/repos/123/123/git/refs",
	// }
	// cont := false
	idx := 0
	// n := sn
	for i := 0; i < b.N; i++ {
		// for {
		// if idx, n, cont = n.MatchPath(p, idx); !cont {
		_, n := sn.MatchPath(path, idx)
		// if n == nil {
		// b.Fail()
		// }
		// break
		// }
		// }
		if n == nil {
			b.Fail()
		}
	}
}

func testMatchNode(t *testing.T) {
	path := "/user/repos"
	_, _ = sn.MatchPath(path, 0)
}
