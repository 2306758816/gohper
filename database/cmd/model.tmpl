{{range $model, $fields := .}}
{{$normalModel := $model.Name}}
{{$lowerModel := $model.LowerName}}
{{$upperModel := $model.UpperName}}
{{$unexportModel := $model.UnexportedName}}
{{$self := $model.Self}}
{{$recv := (printf "(%s *%s)" $self $normalModel)}}
const (
    {{range $index, $field := $fields}}{{with $field}}{{.ConstName}}{{end}} {{if eq $index  0}} uint = iota {{end}}
    {{end}}{{$lowerModel}}FieldEnd
)

func {{$recv}} Table() string {
    return "{{$lowerModel}}"
}

func {{$recv}} FieldValues(fields *types.LightBitSet) []interface{} {
    vals, index := make([]interface{}, fields.BitCount()), 0
    {{range $fields}} if fields.IsSet({{.ConstName}}) {
        vals[index] = {{$self}}.{{.Name}}
        index++
    }
    {{end}}return vals[:index]
}

func {{$recv}} FieldPtrs(fields *types.LightBitSet) []interface{} {
    vals, index := make([]interface{}, fields.BitCount()), 0
    {{range $fields}} if fields.IsSet({{.ConstName}}) {
        vals[index] = &({{$self}}.{{.Name}})
        index++
    }
    {{end}}return vals[:index]
}

func {{$recv}} New() database.Model {
    return new({{$normalModel}})
}
{{end}}
